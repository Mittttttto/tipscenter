<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd ">
	
    
    
	<!-- 自动扫描 -->
    <!-- Uncomment and your base-package here: -->
    <context:component-scan base-package="com.app"/> 
	<aop:aspectj-autoproxy proxy-target-class="true"/>

    <mvc:annotation-driven />

    
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
	        <property name="prefix" value="/WEB-INF/view/"/>
	        <property name="suffix" value=".jsp"/>
	</bean>
	
	
	<!-- 静态资源设置 -->
	<mvc:resources location="/xianyu/" mapping="/xianyu/**"/>
	


     <bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />


	<!-- 设置相应字符串编码 -->
	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>text/jsp;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- ContentNegotiatingViewResolver视图解析器,利用他就可以配置多种返回值 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 这里是否忽略掉accept header，默认就是false -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 如果所有的mediaType都没匹配上，就会使用defaultContentType -->
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<!-- 默认使用MappingJacksonJsonView生成jsonview -->
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="extractValueFromSingleKeyModel" value="true" />
				</bean>
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller">
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller" />
					</property>
				</bean>
			</list>
		</property>
	</bean>


	<!-- 用于将对象转换为 JSON -->
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />

	<!-- Message文件转换器 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>
	
	
	
	<!-- spring validator表单验证 -->
	    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service" />
    
    <bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basename" value="classpath:validatemessages"/>  
        <property name="fileEncodings" value="UTF-8"/>  
        <property name="cacheSeconds" value="120"/>  
    </bean>
	
	
	<!-- 数据库参数配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/tip?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="" />
		<property name="initialSize" value="5" />
		<property name="maxActive" value="20" />
		
	
	<!-- spring jdbc配置	 -->
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
        <property name="dataSource" ref="dataSource" />
    </bean>
	
   <!--  hibernate 配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml" /> -->
		<property name="annotatedClasses">
			<list>
				<value>com.app.model.Tag</value>
				<value>com.app.model.Comment</value>
				<value>com.app.model.User</value>
				<value>com.app.model.Tip</value>
				<value>com.app.model.Version</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
			
			<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				 <prop key="hibernate.generate_statistics">true</prop>     
				 <prop key="hibernate.cache.use_query_cache">true</prop>     
                 <prop key="hibernate.cache.use_second_level_cache">true</prop>   
                 <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>    
                 <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.EhCacheRegionFactory</prop>     
                 <prop key="hibernate.cache.configurationResourceName">ehcache.xml</prop>
                 
                 
                 <!-- 
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>   
                <prop key="hibernate.generate_statistics">true</prop>   
                <prop key="hibernate.cache.use_query_cache">true</prop>   
                <prop key="hibernate.cache.use_structured_entries">true</prop>  
                <prop key="hibernate.cache.use_second_level_cache">true</prop>   
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>   
            	<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>   
                <prop key="hibernate.cache.configurationResourceName">ehcache.xml</prop>                 -->   
            </props>   
            
            
            
        </property>  
     
	</bean>

	
	
	
	<!-- 设定transactionManager -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 启动spring事务注解功能 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 声明式容器事务管理 -->
	
	<tx:advice transaction-manager="txManager" id="txAdvice">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" />
			<tx:method name="delete*"  />
			<tx:method name="check*"  />
			<tx:method name="reg*"  />
			<!-- <tx:method name="*"  propagation="NEVER" read-only="true" /> -->
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut expression="execution (* com.app.service.*.*(..))" id="myPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
	</aop:config>

</beans>
